$side-bar-width: 200px;
$page-margin: 10px;
$page-padding: 10px;

/// original button 蓝色的button
$original: #3178d7;
/// color||Color|0
$button-original-border-color: $original !default;
/// color||Color|0
$button-original-font-color: $color-white !default;
/// color||Color|0
$button-original-background-color: $original !default;

// 字体
$font-family-base: "Chinese Quote", -apple-system, BlinkMacSystemFont,
  "Segoe UI", "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei",
  "Helvetica Neue", Helvetica, Arial, sans-serif, "Apple Color Emoji",
  "Segoe UI Emoji", "Segoe UI Symbol" !default;

// 背景颜
$bg-color: #f8f8f8;
// 主题色
$primary: #fd521d !default;

$primary-light: #fb9919 !default;
// 辅助色
$danger: #fb9919 !default;

$blue: #01a0ec !default;

$green: #2ab26a !default;

$black: #000 !default;

$border-yellow: #f3aa88 !default;

// border color
$border-color: #d8d8d8 !default;

$border-hover: #bbb !default;

$border: #ddd !default;

$border-box: #eee !default;

// font color
$font-color: #505050 !default;
// 淡的color e2e2e2
$light-border-color: #e2e2e2 !default;

$cate-font-color: #b79310;

// Global app direction
$app-direction: ltr !default;

$background-color-base: #f5f7fa;

// The minimum dimensions at which your layout will change,
// adapting to different screen sizes, for use in media queries
$screen-breakpoints: (
  xs: 0,
) !default;

//  进度条背景颜色
$nprogress: $primary;

// header 高度
$header-height: 64px;

/* sidebar
-------------------------- */
$side-bar-width: 256px;
$side-bar-width-mini: 64px;
$side-bar-animate: 0.2s;

// 导航条背景色
$nav-bg: #4c4c4c;
$nav-select-bg: #454545;

/* Colors
-------------------------- */
$color-white: #fff !default;
$color-black: #000 !default;

$color-primary: $primary !default;
$color-primary-light-1: mix($color-white, $color-primary, 10%) !default;
$color-primary-light-2: mix($color-white, $color-primary, 20%) !default;
$color-primary-light-3: mix($color-white, $color-primary, 30%) !default;
$color-primary-light-4: mix($color-white, $color-primary, 40%) !default;
$color-primary-light-5: mix($color-white, $color-primary, 50%) !default;
$color-primary-light-6: mix($color-white, $color-primary, 60%) !default;
$color-primary-light-7: mix($color-white, $color-primary, 70%) !default;
$color-primary-light-8: mix($color-white, $color-primary, 80%) !default;
$color-primary-light-9: mix($color-white, $color-primary, 90%) !default;

$select-hover-background: $bg-color;
$menu-item-hover-fill: $color-primary-light-9;

$border-color-lighter: #ebeef5 !default;
$border-radius-base: 4px !default;

$font-size-base: 14px !default;
$color-text-regular: #606266 !default;
$color-text-secondary: #909399 !default;
$color-text-placeholder: #c0c4cc !default;

/* page
-------------------------- */
$page-padding: 16px !default;
$page-margin: 20px !default;
$page-border-radius: 2px !default;

/* toolbar
-------------------------- */
$toolbar-padding: 10px !default;

$table-row-hover-background: #f5f7fa !default;

/* search
-------------------------- */
$search-link-color: #3d5266 !default;
$search-box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.2) !default;
$search-box-shadow-windows: 0 2px 12px 0 rgba(0, 0, 0, 0.5) !default;
$search-height: 400px !default;
$search-tab-active: $nav-select-bg;
$search-condition-item-hover-fill: $color-primary-light-9 !default;
$search-condition-item-hover-color: $color-primary-light-2 !default;

// Global Card
// ----------------------------------
$card-header-height: 34px !default;
$card-header-color: $font-color !default;
$card-radius: 0 !default;
$card-footer-height: 50px !default;

$container-border-radius: 6px;
$container-background-color: #fff;
$container-padding: 16px;

@mixin input-cover() {
  @include position(0, null, null, 0);
  @include margin(0);

  position: absolute;

  width: 100%;
  height: 100%;

  border: 0;
  background: transparent;
  cursor: pointer;

  appearance: none;
  outline: none;
}

@mixin text-inherit() {
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  letter-spacing: inherit;
  text-decoration: inherit;
  text-overflow: inherit;
  text-transform: inherit;
  text-align: inherit;
  white-space: inherit;
  color: inherit;
}

// Font smoothing
// --------------------------------------------------

@mixin font-smoothing() {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

// Get the key from a map based on the index
@function index-to-key($map, $index) {
  $keys: map-keys($map);

  @return nth($keys, $index);
}

// Breakpoint Mixins
// ---------------------------------------------------------------------------------

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$screen-breakpoints` global variable is used as the `$breakpoints` argument by default.

// ---------------------------------------------------------------------------------

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $screen-breakpoints) {
  $min: map-get($breakpoints, $name);

  @return if($name != index-to-key($breakpoints, 1), $min, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $screen-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $screen-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next(
  $name,
  $breakpoints: $screen-breakpoints,
  $breakpoint-names: map-keys($breakpoints)
) {
  $n: index($breakpoint-names, $name);
  @return if(
    $n < length($breakpoint-names),
    nth($breakpoint-names, $n + 1),
    null
  );
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $screen-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $screen-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Text Direction - ltr / rtl
// $app-direction: multi | rtl | ltr | null (default)
// multi: Both [dir=ltr] and [dir=rtl] are applied to css selectors.
// rtl: Always assumes rtl and only includes rtl css. No [dir] selectors.
// ltr: Always assumes ltr and only includes ltr css. No [dir] selectors.
// null: CSS defaults to use the ltr css, and adds [dir=rtl] selectors to override ltr defaults.
// ----------------------------------------------------------

@mixin multi-dir() {
  @if $app-direction == multi {
    $root: #{&};
    @at-root [dir] {
      #{$root} {
        @content;
      }
    }
  } @else {
    @content;
  }
}

@mixin rtl() {
  @if $app-direction == multi or $app-direction == null {
    $root: #{&};
    @at-root [dir="rtl"] {
      #{$root} {
        @content;
      }
    }
  } @else if $app-direction == rtl {
    @content;
  }
}

@mixin ltr() {
  @if $app-direction == multi {
    $root: #{&};
    @at-root [dir="ltr"] {
      #{$root} {
        @content;
      }
    }
  } @else if $app-direction == ltr or $app-direction == null {
    @content;
  }
}

// SVG Background Image Mixin
// @param {string} $svg
// ----------------------------------------------------------
@mixin svg-background-image($svg, $flip-rtl: false) {
  $url: url-encode($svg);
  $viewBox: str-split(str-extract($svg, "viewBox='", "'"), " ");

  @if $flip-rtl != true or $viewBox == null {
    @include multi-dir() {
      background-image: url("data:image/svg+xml;charset=utf-8,#{$url}");
    }
  } @else {
    $transform: "transform='translate(#{nth($viewBox, 3)}, 0) scale(-1, 1)'";
    $flipped-url: $svg;
    $flipped-url: str-replace($flipped-url, "<path", "<path #{$transform}");
    $flipped-url: str-replace($flipped-url, "<line", "<line #{$transform}");
    $flipped-url: str-replace(
      $flipped-url,
      "<polygon",
      "<polygon #{$transform}"
    );
    $flipped-url: url-encode($flipped-url);

    @include ltr() {
      background-image: url("data:image/svg+xml;charset=utf-8,#{$url}");
    }
    @include rtl() {
      background-image: url("data:image/svg+xml;charset=utf-8,#{$flipped-url}");
    }
  }
}

// Add property horizontal
// @param {string} $start
// @param {string} $end
// ----------------------------------------------------------
@mixin property-horizontal($prop, $start, $end: $start) {
  @if $start == $end {
    @include multi-dir() {
      #{$prop}-left: $start;
      #{$prop}-right: $end;
    }
  } @else {
    @include ltr() {
      #{$prop}-left: $start;
      #{$prop}-right: $end;
    }
    @include rtl() {
      #{$prop}-left: $end;
      #{$prop}-right: $start;
    }
  }
}

// Add property for all directions
// @param {string} $prop
// @param {string} $top
// @param {string} $end
// @param {string} $bottom
// @param {string} $start
// @param {boolean} $content include content or use default
// ----------------------------------------------------------
@mixin property($prop, $top, $end: $top, $bottom: $top, $start: $end) {
  @if $top == $end and $top == $bottom and $top == $start {
    @include multi-dir() {
      #{$prop}: $top;
    }
  } @else if
    $top ==
    $bottom and
    $end ==
    $start and
    $top !=
    null and
    $end !=
    null
  {
    @include multi-dir() {
      #{$prop}: $top $end;
    }
  } @else if
    $end ==
    $start and
    $top !=
    null and
    $end !=
    null and
    $bottom !=
    null
  {
    @include multi-dir() {
      #{$prop}: $top $end $bottom;
    }
  } @else if
    $top !=
    null and
    $end !=
    null and
    $bottom !=
    null and
    $start !=
    null
  {
    @include ltr() {
      #{$prop}: $top $end $bottom $start;
    }
    @include rtl() {
      #{$prop}: $top $start $bottom $end;
    }
  } @else {
    @include property-horizontal($prop, $start, $end);
    @include multi-dir() {
      #{$prop}-top: $top;
      #{$prop}-bottom: $bottom;
    }
  }
}

// Add padding horizontal
// @param {string} $start
// @param {string} $end
// ----------------------------------------------------------
@mixin padding-horizontal($start, $end: $start) {
  @include property-horizontal(padding, $start, $end);
}

// Add padding for all directions
// @param {string} $top
// @param {string} $end
// @param {string} $bottom
// @param {string} $start
// ----------------------------------------------------------
@mixin padding($top, $end: $top, $bottom: $top, $start: $end) {
  @include property(padding, $top, $end, $bottom, $start);
}

// Add margin horizontal
// @param {string} $start
// @param {string} $end
// ----------------------------------------------------------
@mixin margin-horizontal($start, $end: $start) {
  @include property-horizontal(margin, $start, $end);
}

// Add margin for all directions
// @param {string} $top
// @param {string} $end
// @param {string} $bottom
// @param {string} $start
// ----------------------------------------------------------
@mixin margin($top, $end: $top, $bottom: $top, $start: $end) {
  @include property(margin, $top, $end, $bottom, $start);
}

// Add position horizontal
// @param {string} $start - amount to position start
// @param {string} $end - amount to left: 0; end
// ----------------------------------------------------------
@mixin position-horizontal($start: null, $end: null) {
  @if $start == $end {
    @include multi-dir() {
      left: $start;
      right: $end;
    }
  } @else {
    @include ltr() {
      left: $start;
      right: $end;
    }
    @include rtl() {
      left: $end;
      right: $start;
    }
  }
}

// Add position for all directions
// @param {string} $top
// @param {string} $end
// @param {string} $bottom
// @param {string} $start
// ----------------------------------------------------------
@mixin position($top: null, $end: null, $bottom: null, $start: null) {
  @include position-horizontal($start, $end);
  top: $top;
  bottom: $bottom;
}

// Add border radius for all directions
// @param {string} $top-start
// @param {string} $top-end
// @param {string} $bottom-end
// @param {string} $bottom-start
// ----------------------------------------------------------
@mixin border-radius(
  $top-start,
  $top-end: $top-start,
  $bottom-end: $top-start,
  $bottom-start: $top-end
) {
  @if $top-start ==
    $top-end and
    $top-start ==
    $bottom-end and
    $top-start ==
    $bottom-start
  {
    @include multi-dir() {
      border-radius: $top-start;
    }
  } @else {
    @include ltr() {
      border-top-left-radius: $top-start;
      border-top-right-radius: $top-end;
      border-bottom-right-radius: $bottom-end;
      border-bottom-left-radius: $bottom-start;
    }

    @include rtl() {
      border-top-left-radius: $top-end;
      border-top-right-radius: $top-start;
      border-bottom-right-radius: $bottom-start;
      border-bottom-left-radius: $bottom-end;
    }
  }
}

// Add direction for all directions
// @param {string} $dir - Direction on LTR
@mixin direction($dir) {
  $other-dir: null;

  @if $dir == ltr {
    $other-dir: rtl;
  } @else {
    $other-dir: ltr;
  }

  @include ltr() {
    direction: $dir;
  }
  @include rtl() {
    direction: $other-dir;
  }
}

// Add float for all directions
// @param {string} $side
// @param {string} $decorator - !important
@mixin float($side, $decorator: null) {
  @if $side == start {
    @include ltr() {
      float: left $decorator;
    }
    @include rtl() {
      float: right $decorator;
    }
  } @else if $side == end {
    @include ltr() {
      float: right $decorator;
    }
    @include rtl() {
      float: left $decorator;
    }
  } @else {
    @include multi-dir() {
      float: $side $decorator;
    }
  }
}

@mixin background-position(
  $horizontal,
  $horizontal-amount: null,
  $vertical: null,
  $vertical-amount: null
) {
  @if $horizontal == start or $horizontal == end {
    $horizontal-ltr: null;
    $horizontal-rtl: null;
    @if $horizontal == start {
      $horizontal-ltr: left;
      $horizontal-rtl: right;
    } @else {
      $horizontal-ltr: right;
      $horizontal-rtl: left;
    }

    @include ltr() {
      background-position: $horizontal-ltr $horizontal-amount $vertical
        $vertical-amount;
    }
    @include rtl() {
      background-position: $horizontal-rtl $horizontal-amount $vertical
        $vertical-amount;
    }
  } @else {
    @include multi-dir() {
      background-position: $horizontal $horizontal-amount $vertical
        $vertical-amount;
    }
  }
}

@mixin transform-origin($x-axis, $y-axis: null) {
  @if $x-axis == start {
    @include ltr() {
      transform-origin: left $y-axis;
    }
    @include rtl() {
      transform-origin: right $y-axis;
    }
  } @else if $x-axis == end {
    @include ltr() {
      transform-origin: right $y-axis;
    }
    @include rtl() {
      transform-origin: left $y-axis;
    }
  } @else if $x-axis == left or $x-axis == right {
    @include multi-dir() {
      transform-origin: $x-axis $y-axis;
    }
  } @else {
    @include ltr() {
      transform-origin: $x-axis $y-axis;
    }
    @include rtl() {
      transform-origin: calc(100% - #{$x-axis}) $y-axis;
    }
  }
}

// Add transform for all directions
// @param {string} $transforms - comma separated list of transforms
@mixin transform($transforms...) {
  $extra: null;

  $x: null;
  $ltr-translate: null;
  $rtl-translate: null;

  @each $transform in $transforms {
    @if (str-index($transform, translate3d)) {
      $transform: str-replace($transform, "translate3d(");
      $transform: str-replace($transform, ")");

      $coordinates: str-split($transform, ",");

      $x: nth($coordinates, 1);
      $y: nth($coordinates, 2);
      $z: nth($coordinates, 3);

      $ltr-translate: translate3d($x, $y, $z);
      $rtl-translate: translate3d(calc(-1 * #{$x}), $y, $z);
    } @else {
      @if $extra == null {
        $extra: $transform;
      } @else {
        $extra: $extra $transform;
      }
    }
  }

  @if $x == "0" or $x == null {
    @include multi-dir() {
      transform: $ltr-translate $extra;
    }
  } @else {
    @include ltr() {
      transform: $ltr-translate $extra;
    }

    @include rtl() {
      transform: $rtl-translate $extra;
    }
  }
}

// Add safe-area-padding for all directions
// @param {string} $top
// @param {string} $end
// @param {string} $bottom
// @param {string} $start
// ----------------------------------------------------------
@mixin safe-area-padding($top, $end: $top, $bottom: $top, $start: $end) {
  // two groups for older constant and newer env
  $safe-area-top: null;
  $safe-area-start: null;
  $safe-area-bottom: null;
  $safe-area-end: null;

  $safe-area-top-env: null;
  $safe-area-start-env: null;
  $safe-area-bottom-env: null;
  $safe-area-end-env: null;

  @if ($start) {
    $safe-area-start: unquote(
      "calc(constant(safe-area-inset-left) + #{$start})"
    );
    $safe-area-start-env: unquote(
      "calc(env(safe-area-inset-left) + #{$start})"
    );
  }
  @if ($end) {
    $safe-area-end: unquote("calc(constant(safe-area-inset-right) + #{$end})");
    $safe-area-end-env: unquote("calc(env(safe-area-inset-right) + #{$end})");
  }
  @if ($top) {
    $safe-area-top: unquote("calc(constant(safe-area-inset-top) + #{$top})");
    $safe-area-top-env: unquote("calc(env(safe-area-inset-top) + #{$top})");
  }
  @if ($bottom) {
    $safe-area-bottom: unquote(
      "calc(constant(safe-area-inset-bottom) + #{$bottom})"
    );
    $safe-area-bottom-env: unquote(
      "calc(env(safe-area-inset-bottom) + #{$bottom})"
    );
  }

  @include padding(
    $safe-area-top,
    $safe-area-end,
    $safe-area-bottom,
    $safe-area-start
  );
  @include padding(
    $safe-area-top-env,
    $safe-area-end-env,
    $safe-area-bottom-env,
    $safe-area-start-env
  );
}

// Add safe area padding horizontal
// @param {string} $start
// @param {string} $end
// ----------------------------------------------------------
@mixin safe-area-padding-horizontal($start, $end: $start) {
  $safe-area-end: null;
  $safe-area-start: null;
  $safe-area-start-env: null;
  $safe-area-end-env: null;

  @if ($end) {
    $safe-area-end: unquote("calc(constant(safe-area-inset-right) + #{$end})");
    $safe-area-end-env: unquote("calc(env(safe-area-inset-right) + #{$end})");
  }
  @if ($start) {
    $safe-area-start: unquote(
      "calc(constant(safe-area-inset-left) + #{$start})"
    );
    $safe-area-start-env: unquote(
      "calc(env(safe-area-inset-left) + #{$start})"
    );
  }

  @include padding-horizontal($safe-area-start, $safe-area-end);
  @include padding-horizontal($safe-area-start-env, $safe-area-end-env);
}

// Add safe position horizontal
// @param {string} $start - amount to position start
// @param {string} $end - amount to left: 0; end
// ----------------------------------------------------------
@mixin safe-position-horizontal($start: null, $end: null) {
  $safe-area-start: null;
  $safe-area-end: null;
  $safe-area-start-env: null;
  $safe-area-end-env: null;
  @if ($start) {
    $safe-area-start: unquote(
      "calc(constant(safe-area-inset-left) + #{$start})"
    );
    $safe-area-start-env: unquote(
      "calc(env(safe-area-inset-left) + #{$start})"
    );
  }
  @if ($end) {
    $safe-area-end: unquote("calc(constant(safe-area-inset-right) + #{$end})");
    $safe-area-end-env: unquote("calc(env(safe-area-inset-right) + #{$end})");
  }

  @if $safe-area-start == $safe-area-end {
    @include multi-dir() {
      left: $safe-area-start;
      right: $safe-area-end;
    }
    @include multi-dir() {
      left: $safe-area-start-env;
      right: $safe-area-end-env;
    }
  } @else {
    @include ltr() {
      left: $safe-area-start;
      right: $safe-area-end;
    }
    @include ltr() {
      left: $safe-area-start-env;
      right: $safe-area-end-env;
    }
    @include rtl() {
      left: $safe-area-end;
      right: $safe-area-start;
    }
    @include rtl() {
      left: $safe-area-end-env;
      right: $safe-area-start-env;
    }
  }
}

@mixin user-select($value) {
  user-select: $value;
}

@mixin is-windows {
  .is-window {
    @content;
  }
}
